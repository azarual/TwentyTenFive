HTML5 has a <a href="http://www.w3.org/html/logo/" target="_blank">logo</a>. It’s official. And when anything has a logo you know it’s hit the mainstream. And yet still people are reticent to use it, scared away by cross-browser compatibility and learning new markup. And possibly the logo too.

In a <a href="http://css-tricks.com/poll-results-html5-on-new-projects/" target="_blank">recent survey</a> by Chris Coyier over at CSS Tricks, almost two-thirds of respondents said they would not use HTML5 in new projects. This is depressing reading.

HTML5 is many things, but what it’s not is just adding <code>&lt;doctype html&gt;</code> at the start of your file and getting excited that you’re <em>so</em> 2011. Markup, as they say, is meaning, and HTML5 brings with it a whole bunch of meaning to your documents.

Which brings us to <a href="http://wordpress.org/" target="_blank">WordPress</a>. Last year WordPress launched arguably their biggest update ever: <a href="http://wordpress.org/download/" target="_blank">WordPress 3.0</a>. And with it came a new theme called <a href="http://wordpress.org/extend/themes/twentyten" target="_blank">TwentyTen</a>, and the promise of a new theme every year.

Now before I go on I want to make clear that I have made an assumption: that you don’t need convincing to use HTML5. You understand the benefits and you are eager to work with it. It is out of the scope of this article to explain why HTML5 is a natural progressive step you can take today, but if you still need to see the arguments then check out:
<ul>
	<li><a href="http://www.smashingmagazine.com/2010/11/10/learning-to-love-html5/" target="_blank">Learning to Love HTML5</a></li>
	<li><a href="http://blogs.sitepoint.com/2010/07/20/5-reasons-why-you-can-use-html5-today/" target="_blank">Five Reasons Why You Can Use HTML5 Today</a></li>
	<li><a href="http://www.smashingmagazine.com/2009/07/16/html5-and-the-future-of-the-web/" target="_blank">HTML5 And The Future Of The Web</a></li>
</ul>
<h3>HTML5 &amp; JavaScript</h3>
TwentyTen is a fine theme<a href="http://2010dev.wordpress.com/2010/02/02/valid-html5/" target="_blank"></a>, and whilst it’s design might not be suitable for many sites it <a href="http://2010dev.wordpress.com/2010/02/02/valid-html5/" target="_blank">already validates as HTML5</a>. However, in order to cater for users without JavaScript TwentyTen has to forgo certain elements because Internet Explorer doesn’t support them prior to version 9.

For example, you have probably already heard of &lt;section&gt; and &lt;article&gt; tags, both of which are champing at the bit to embed themselves in a WordPress template. However, to use these HTML5 elements in IE8 (and it’s ancestors) you need to include JavaScript to create these elements in the DOM so that they may be styled with CSS. Turn off JavaScript and you turn off styles on these elements; invariably this will ‘break’ your page.

So WordPress has seemingly made the decision to excluded these problematic tags so that it’s default theme supports all browsers, not just those with JavaScript turned on.

Whilst I understand this decision I also think it’s a mistake. I believe that there are three core technologies that make the web work: HTML, CSS and JavaScript. All desktop browsers support them (to some degree) so if a user chooses to turn any one of these off they must expect a degraded experience. JavaScript is now fundamental to user experience, and whilst we can support users with JavaScript turned off I question whether we should.

There is <a href="http://developer.yahoo.com/blogs/ydn/posts/2010/10/how-many-users-have-javascript-disabled/" target="_blank">concrete evidence from Yahoo!</a> that less than 1.5% of it’s users turn off JavaScript. My own research into this phenomenon, ably assisted by Greig Daines at eConversions, suggests this number to be below 0.5% (based on millions of visitors to a UK retail site).

As soon as we stop supporting users with JavaScript disabled we are able to embrace all elements of HTML5, together with CSS3 and media-queries as well!

I strongly suggest <a href="http://remysharp.com/2009/01/07/html5-enabling-script/" target="_blank">Remy Sharp’s HTML5 shim</a> which makes older versions of IE play fair with HTML5. Or if you also want to sink your teeth into CSS3 then <a href="http://www.modernizr.com/" target="_blank">Modernizr</a> not only adds support for HTML5 elements but also let’s you know which CSS3 properties are supported.

So let’s assume you’ve smartly banished non-JavaScript users with polite message in a &lt;noscript&gt; tag; we can now start to tinker under the hood of TwentyTen, and bring some real HTML5 goodness to WordPress.
<h3>HTML5 Ready</h3>
There are a number of things that TwentyTen has spot on. First of all, it declares the right doctype and includes the abbreviated meta charset tag. We can also see the liberal use of micro-formats in the &lt;head&gt;, and use of WAI-ARIA roles throughout the theme. However we can go further. Whilst we address a good number of new HTML5 elements in this piece,  there are many more you could add yourself. Do let us know your ideas,  and how you get on implementing them in the comments!
<h4>Important notes</h4>
<ul>
	<li>I am referencing the HTML generated at <a href="http://wp-themes.com/twentyten/" target="_blank">http://wp-themes.com/twentyten/</a> rather than just the simple ‘Hello World’ clean install of WordPress3.</li>
	<li>In this article I edit the files directly in the /wp-content/themes/twentyten directory. However, these files could be accidentally overwritten so in the download link at bottom of the article you can download a child theme.</li>
	<li>Line numbers may change, so when I reference a specific line number I usuall say 'on or around line...'.</li>
</ul>
<h4>Articles</h4>
Perhaps the most confusing parts of the HTML5 spec is that of &lt;section&gt; and &lt;article&gt; tags. Which came first, the chicken or the egg? The easiest way to remember this is to refer to the spec. Now the <a href="http://dev.w3.org/html5/spec/Overview.html" target="_blank">HTML5 spec</a> is a dry document at the best of times, but it’s <a href="http://dev.w3.org/html5/spec/Overview.html#the-article-element" target="_blank">explanation of &lt;article&gt;’s</a> should always point you in the right direction:
<blockquote>“The <code>article</code> element represents a self-contained composition in a document, page, application or site that is intended to be independently distributable or reusable.”</blockquote>
If the piece of content in question can be, and most likely will be, syndicated by RSS then there’s a good chance it’s an &lt;article&gt;; a blog post in WordPress exactly fits this bill.

In the case of the TwentyTen homepage we have the following HTML:
<pre class="brush: html">&lt;div id="post-19"&gt;
...
&lt;/div&gt;</pre>
To a screenreader or a spider it means, basically, nothing. However, with the simple addition of an article tag we’re now able to transform this into markup with meaning.
<pre class="brush: html">&lt;article id="post-19"&gt;
...
&lt;/article&gt;</pre>
To make this change in the TwentyTen theme you need to open loop.php in /wp-content/themes/twentyten/. On or around line 60 you should find the following code:
<pre class="brush: php">&lt;?php if ( in_category( _x('gallery', 'gallery category slug', 'twentyten') ) ) : ?&gt;
&lt;div id="post-&lt;?php the_ID(); ?&gt;" &lt;?php post_class(); ?&gt;&gt;</pre>
We need to change that <code>&lt;div&gt;</code> to an <code>&lt;article&gt;</code> so it reads:
<pre class="brush: html">&lt;article id="post-&lt;?php the_ID(); ?&gt;" &lt;?php post_class(); ?&gt;&gt;</pre>
and then close it again on or around line 96 so that:
<pre class="brush: html">&lt;/div&gt;&lt;!-- #post-## --&gt;</pre>
becomes
<pre class="brush: html">&lt;/article&gt;&lt;!-- #post-## --&gt;</pre>
So far, so good. It’s a simple change but one that has already overhauled the semantics of your page. But we can do more…
<h4>Time &amp; Date</h4>
We can now give the date and time that the article was published more content with HTML5’s &lt;time&gt; tag. Take a look at the following code from our example above:
<pre class="brush: html">&lt;a href="http://wp-themes.com/?p=19" title="4:33 am" rel="bookmark"&gt;&lt;span&gt;October 17, 2008&lt;/span&gt;&lt;/a&gt;</pre>
We can give our markup meaning by transposing this to
<pre class="brush: html">&lt;a href="http://wp-themes.com/?p=19" title="4:33 am" rel="bookmark"&gt;&lt;time datetime= "2008-10-17T04:33Z" pubdate&gt;October 17, 2008&lt;/time&gt;&lt;/a&gt;</pre>
Firstly, I have left the class in there in case you are applying any style to the element; it is not needed by the &lt;time&gt; tag.

According to the HTML5 spec,
<blockquote>“The <code>&lt;time&gt;</code> element either represents a time on a 24-hour clock, or a precise date on the Proleptic Georgian calendar, optionally with a time and a time-zone offset.”</blockquote>
We can utilise this element then to explicitly say when our article was published - this time is now machine-readable and should we wish there are many ways our browser could then interact with this date. I’ve also added in the boolean attribute ‘pubdate’ which designates this date as the date the article/content was published.

To change our WordPress code the first thing we need to include is the date and time itself. The time is optional, but since WordPress includes when you post a blog article we can too. To implement this into WordPress involves us digging a little deeper. In loop.php the date is included by calling the function:
<pre class="brush: php">&lt;?php twentyten_posted_on(); ?&gt;</pre>
If we want to make our HTML5 changes we need to head over to /wp-content/themes/twentyten/functions.php and scroll down to around line 500 where we’ll see:
<pre class="brush: php">function twentyten_posted_on() {
printf( __( '&lt;span&gt;Posted on&lt;/span&gt; %2$s &lt;span&gt;by&lt;/span&gt; %3$s', 'twentyten' ),
'meta-prep meta-prep-author',
sprintf( '&lt;a href="%1$s" title="%2$s" rel="bookmark"&gt;&lt;span&gt;%3$s&lt;/span&gt;&lt;/a&gt;',
get_permalink(),
esc_attr( get_the_time() ),
get_the_date()
),</pre>
If you don’t know what that means then don’t worry. We’re only focussing on the sprintf command which basically takes a string and inserts the variables returned by the three functions listed: get_permanlink(), get_the_time() and get_the_date() are inserted into %1$s, %2$s and %3$s respectively.

We need to make changes to how the date is formatted, so we need to add a fourth function: get_the_date('c'). WordPress will return the date in Coordinated Universal Time (UTC) format which is exactly what’s needed for the &lt;time&gt; element. We also ammend
<pre class="brush: php">esc_attr( get_the_time() )</pre>
to
<pre class="brush: php">esc_attr( get_the_time('H:i') )</pre>
which returns the time in 24-hour clock with leading zeros. Our finished code looks like this:
<pre class="brush: php">printf( __( '&lt;span&gt;Posted on&lt;/span&gt; %2$s &lt;span&gt;by&lt;/span&gt; %3$s', 'twentyten' ),
'meta-prep meta-prep-author',
sprintf( '&lt;a href="%1$s" title="%2$s" rel="bookmark"&gt;&lt;time datetime="%3$s" pubdate&gt;%4$s&lt;/time&gt;&lt;/a&gt;',
get_permalink(),
esc_attr( get_the_time('H:i') ),
get_the_date('c'),
get_the_date()
),</pre>
I’ve have included <code>get_the_date()</code> twice as we need two different formats: one for the <code>&lt;time&gt;</code> element and one that’s displayed to the user.

For more details on the WordPress date/time functions check out:
<ul>
	<li><a href="http://codex.wordpress.org/Function_Reference/get_the_time" target="_blank">http://codex.wordpress.org/Function_Reference/get_the_time</a></li>
	<li><a href="http://codex.wordpress.org/Formatting_Date_and_Time" target="_blank">http://codex.wordpress.org/Formatting_Date_and_Time</a></li>
</ul>
<h4>Figures</h4>
A figure, for our purposes at least, is a piece of media that you might upload to WordPress and then include in a post; the most obvious example of which would be an image. WordPress3 is helpful enough to give images a caption but it doesn’t do so using the new HTML5 <code>&lt;figure&gt;</code> tag.

The spec <a href="http://dev.w3.org/html5/spec/Overview.html#the-figure-element" target="_blank">defines</a> <code>&lt;figure&gt;</code> as follows:
<blockquote>“The figure element represents a unit of content, optionally with a caption, that is self-contained, that is typically referenced as a single unit from the main flow of the document, and that can be moved away from the main flow of the document without affecting the document’s meaning.”</blockquote>
Currently an img with a caption will be rendered like so:
<pre class="brush: html">&lt;div style="width: 445px"&gt;&lt;img alt="Boat" src="http://wpdotorg.files.wordpress.com/2008/11/boat.jpg" title="Boat" width="435" height="288" /&gt;
&lt;p&gt;Boat&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Boat.&lt;/p&gt;</pre>
How do we do this? Well in wp-includes we need to look at media.php, which is where this code is generated. On or around line 739 you’ll find:
<pre class="brush: php">return '&lt;div ' . $id . 'class="wp-caption ' . esc_attr($align) . '" style="width: ' . (10 + (int) $width) . 'px"&gt;'
. do_shortcode( $content ) . '&lt;p&gt;' . $caption . '&lt;/p&gt;&lt;/div&gt;';</pre>
What we need to do is redefine the function that this piece of code sits in (img_caption_shortcode()) and also reassign the caption shortcode for this function. I’ve done this in functions.php by adding the following:
<pre class="brush: php">add_shortcode('wp_caption', 'twentyten_img_caption_shortcode');
add_shortcode('caption', 'twentyten_img_caption_shortcode');

function twentyten_img_caption_shortcode($attr, $content = null) {

// Allow plugins/themes to override the default caption template.
$output = apply_filters('img_caption_shortcode', '', $attr, $content);
if ( $output != '' )
return $output;

extract(shortcode_atts(array(
'id'    =&gt; '',
'align'    =&gt; 'alignnone',
'width'    =&gt; '',
'caption' =&gt; ''
), $attr));

if ( 1 &gt; (int) $width || empty($caption) )
return $content;

if ( $id ) $id = 'id="' . esc_attr($id) . '" ';

return '&lt;figure ' . $id . 'class="wp-caption ' . esc_attr($align) . '" style="width: ' . (10 + (int) $width) . 'px"&gt;'
. do_shortcode( $content ) . '&lt;figcaption&gt;' . $caption . '&lt;/figcaption&gt;&lt;/figure&gt;';

}</pre>
First we point shortcodes for wp-caption and caption to our new function twentyten_img_caption_shortcode(). Then we simply copy the original function from media.php and change the last few lines to include our &lt;figure&gt; element. This will now render our boat.jpg example from above like so:
<pre class="brush: html">&lt;figure id="attachment_64" style="width: 445px;"&gt;
&lt;a href="http://localhost/wp-content/uploads/2010/07/boat.jpg"&gt;&lt;img title="boat" src="http://localhost/wp-content/uploads/2010/07/boat.jpg" alt="" width="435" height="288"&gt;&lt;/a&gt;
&lt;figcaption&gt;Boat&lt;/figcaption&gt;
&lt;/figure&gt;</pre>
<h4>Header, Navigation &amp; Footer</h4>
Finally we can take a look at inserting the new <code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code> and <code>&lt;footer&gt;</code> tags. Currently the code in /wp-content/themes/twentyten/header.php looks more or less like this:
<pre class="brush: html">&lt;div id="header"&gt;
&lt;div id="masthead"&gt;
&lt;div id="branding" role="banner"&gt;
...
&lt;/div&gt;&lt;!-- #branding --&gt;

&lt;div id="access" role="navigation"&gt;
...
&lt;/div&gt;&lt;!-- #access --&gt;
&lt;/div&gt;&lt;!-- #masthead --&gt;
&lt;/div&gt;&lt;!-- #header --&gt;</pre>
It doesn’t take a genius to see that we can easily make this HTML5 ready by changing some of those divs.
<pre class="brush: html">&lt;header&gt;
&lt;section id="masthead" &gt;
&lt;div id="branding" role="banner"&gt;
...
&lt;/div&gt;&lt;!-- #branding --&gt;

&lt;nav id="access" role="navigation"&gt;
...
&lt;/nav&gt;&lt;!-- #access --&gt;
&lt;/section&gt;&lt;!-- #masthead --&gt;
&lt;header&gt;&lt;!-- #header --&gt;</pre>
You can see that we’ve still left the WAI-ARIA role of ‘navigation’ assigned to the nav element, and this is simply to offer the broadest support to all browsers and screen-readers.

I have replaced the #masthead div with a section, as all the elements within this section relate to one-another. It seems you could delete this section altogether and just apply 30px of top-padding to header to maintain the same layout. Likewise, I’ve maintained the elements IDs in case there is more than one instance of them on the page; multiple headers, footers and navs (amongst others) are all welcome on a HTML5 page.

Likewise in /wp-content/themes/twentyten/footer.php we have
<pre class="brush: php">&lt;div id="footer" role="contentinfo"&gt;
  &lt;div id="colophon"&gt;
  ...
  &lt;div id="site-info"&gt;
    &lt;a href="&lt;?php echo home_url( '/' ) ?&gt;" title="&lt;?php echo esc_attr( get_bloginfo( 'name', 'display' ) ); ?&gt;" rel="home"&gt;
    &lt;?php bloginfo( 'name' ); ?&gt;
    &lt;/a&gt;
  &lt;/div&gt;&lt;!-- #site-info --&gt;

  &lt;div id="site-generator"&gt;
  ...
  &lt;/div&gt;&lt;!-- #site-generator --&gt;

  &lt;/div&gt;&lt;!-- #colophon --&gt;
&lt;/div&gt;&lt;!-- #footer --&gt;</pre>
<h4>Javascript &amp; CSS</h4>
First we need to include modernizr.js which will make sure all our new elements render correctly in Internet Explorer. I add the following line to header.php:
<pre class="brush: html">&lt;script src=”/js/modernizr.js”&gt;&lt;/script&gt;</pre>
(Note that we no longer need type=”text/javascript”)

Next, in style.css we need to make sure that our HTML5 elements have display: block assigned to them. For our purposes the following line will suffice:
<pre class="brush: css">header, nav, section, article, aside, figure, footer { display: block; }</pre>
Whilst we’re looking at the CSS it’s worth remebering that we can now remove type=”text/css” from our &lt;link /&gt; tags. The simplified code looks like:
<pre class="brush: html">&lt;link rel="stylesheet" href="&lt;?php bloginfo( 'stylesheet_url' ); ?&gt;" /&gt;</pre>
That should be enough for now, but remember that changing the structure of the page by replacing older HTML elements with new ones might require some additional CSS.
<h3>Final Thoughts</h3>
Lorem Ipsum

If you make your changes in twentyten and update WordPress it can overwrite them!
<h3>Other Resources</h3>
You may be interested in the following articles and related resources



<!----------------------- END OF THE CODE VERSION ----------------------------->


HTML5 has a logo. It’s official. And when anything has a logo you know it’s hit the mainstream. And yet still people are reticent to use it, scared away by cross-browser compatibility and learning new markup. And possibly the logo too.

In a recent survey by Chris Coyier over at CSS Tricks, almost two-thirds of respondents said they would not use HTML5 in new projects. This is depressing reading.

HTML5 is many things, but what it’s not is just adding <doctype html> at the start of your file and getting excited that you’re so 2011. Markup, as they say, is meaning, and HTML5 brings with it a whole bunch of meaning to your documents.

Which brings us to WordPress. Last year WordPress launched arguably their biggest update ever: WordPress 3.0. And with it came a new theme called TwentyTen, and the promise of a new theme every year.

Now before I go on I want to make clear that I have made an assumption: that you don’t need convincing to use HTML5. You understand the benefits and you are eager to work with it. It is out of the scope of this article to explain why HTML5 is a natural progressive step you can take today, but if you still need to see the arguments then check out:

    * Learning to Love HTML5
    * Five Reasons Why You Can Use HTML5 Today
    * HTML5 And The Future Of The Web

HTML5 & JavaScript

TwentyTen is a fine theme, and whilst it’s design might not be suitable for many sites it already validates as HTML5. However, in order to cater for users without JavaScript TwentyTen has to forgo certain elements because Internet Explorer doesn’t support them prior to version 9.

For example, you have probably already heard of <section> and <article> tags, both of which are champing at the bit to embed themselves in a WordPress template. However, to use these HTML5 elements in IE8 (and it’s ancestors) you need to include JavaScript to create these elements in the DOM so that they may be styled with CSS. Turn off JavaScript and you turn off styles on these elements; invariably this will ‘break’ your page.

So WordPress has seemingly made the decision to excluded these problematic tags so that it’s default theme supports all browsers, not just those with JavaScript turned on.

Whilst I understand this decision I also think it’s a mistake. I believe that there are three core technologies that make the web work: HTML, CSS and JavaScript. All desktop browsers support them (to some degree) so if a user chooses to turn any one of these off they must expect a degraded experience. JavaScript is now fundamental to user experience, and whilst we can support users with JavaScript turned off I question whether we should.

There is concrete evidence from Yahoo! that less than 1.5% of it’s users turn off JavaScript. My own research into this phenomenon, ably assisted by Greig Daines at eConversions, suggests this number to be below 0.5% (based on millions of visitors to a UK retail site).

As soon as we stop supporting users with JavaScript disabled we are able to embrace all elements of HTML5, together with CSS3 and media-queries as well!

I strongly suggest Remy Sharp’s HTML5 shim which makes older versions of IE play fair with HTML5. Or if you also want to sink your teeth into CSS3 then Modernizr not only adds support for HTML5 elements but also let’s you know which CSS3 properties are supported.

So let’s assume you’ve smartly banished non-JavaScript users with polite message in a <noscript> tag; we can now start to tinker under the hood of TwentyTen, and bring some real HTML5 goodness to WordPress.
HTML5 Ready

There are a number of things that TwentyTen has spot on. First of all, it declares the right doctype and includes the abbreviated meta charset tag. We can also see the liberal use of micro-formats in the <head>, and use of WAI-ARIA roles throughout the theme. However we can go further. Whilst we address a good number of new HTML5 elements in this piece, there are many more you could add yourself. Do let us know your ideas, and how you get on implementing them in the comments!
Important notes

    * I am referencing the HTML generated at http://wp-themes.com/twentyten/ rather than just the simple ‘Hello World’ clean install of WordPress3.
    * In this article I edit the files directly in the /wp-content/themes/twentyten directory. However, these files could be accidentally overwritten so in the download link at bottom of the article you can download a child theme.
    * Line numbers may change, so when I reference a specific line number I usuall say 'on or around line...'.

Articles

Perhaps the most confusing parts of the HTML5 spec is that of <section> and <article> tags. Which came first, the chicken or the egg? The easiest way to remember this is to refer to the spec. Now the HTML5 spec is a dry document at the best of times, but it’s explanation of <article>’s should always point you in the right direction:

    “The article element represents a self-contained composition in a document, page, application or site that is intended to be independently distributable or reusable.”

If the piece of content in question can be, and most likely will be, syndicated by RSS then there’s a good chance it’s an <article>; a blog post in WordPress exactly fits this bill.

In the case of the TwentyTen homepage we have the following HTML:

<div id="post-19">
...
</div>

To a screenreader or a spider it means, basically, nothing. However, with the simple addition of an article tag we’re now able to transform this into markup with meaning.

<article id="post-19">
...
</article>

To make this change in the TwentyTen theme you need to open loop.php in /wp-content/themes/twentyten/. On or around line 60 you should find the following code:

<?php if ( in_category( _x('gallery', 'gallery category slug', 'twentyten') ) ) : ?>
<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>

We need to change that <div> to an <article> so it reads:

<article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>

and then close it again on or around line 96 so that:

</div><!-- #post-## -->

becomes

</article><!-- #post-## -->

So far, so good. It’s a simple change but one that has already overhauled the semantics of your page. But we can do more…
Time & Date

We can now give the date and time that the article was published more content with HTML5’s <time> tag. Take a look at the following code from our example above:

<a href="http://wp-themes.com/?p=19" title="4:33 am" rel="bookmark"><span>October 17, 2008</span></a>

We can give our markup meaning by transposing this to

<a href="http://wp-themes.com/?p=19" title="4:33 am" rel="bookmark"><time datetime= "2008-10-17T04:33Z" pubdate>October 17, 2008</time></a>

Firstly, I have left the class in there in case you are applying any style to the element; it is not needed by the <time> tag.

According to the HTML5 spec,

    “The <time> element either represents a time on a 24-hour clock, or a precise date on the Proleptic Georgian calendar, optionally with a time and a time-zone offset.”

We can utilise this element then to explicitly say when our article was published - this time is now machine-readable and should we wish there are many ways our browser could then interact with this date. I’ve also added in the boolean attribute ‘pubdate’ which designates this date as the date the article/content was published.

To change our WordPress code the first thing we need to include is the date and time itself. The time is optional, but since WordPress includes when you post a blog article we can too. To implement this into WordPress involves us digging a little deeper. In loop.php the date is included by calling the function:

<?php twentyten_posted_on(); ?>

If we want to make our HTML5 changes we need to head over to /wp-content/themes/twentyten/functions.php and scroll down to around line 500 where we’ll see:

function twentyten_posted_on() {
printf( __( '<span>Posted on</span> %2$s <span>by</span> %3$s', 'twentyten' ),
'meta-prep meta-prep-author',
sprintf( '<a href="%1$s" title="%2$s" rel="bookmark"><span>%3$s</span></a>',
get_permalink(),
esc_attr( get_the_time() ),
get_the_date()
),

If you don’t know what that means then don’t worry. We’re only focussing on the sprintf command which basically takes a string and inserts the variables returned by the three functions listed: get_permanlink(), get_the_time() and get_the_date() are inserted into %1$s, %2$s and %3$s respectively.

We need to make changes to how the date is formatted, so we need to add a fourth function: get_the_date('c'). WordPress will return the date in Coordinated Universal Time (UTC) format which is exactly what’s needed for the <time> element. We also ammend

esc_attr( get_the_time() )

to

esc_attr( get_the_time('H:i') )

which returns the time in 24-hour clock with leading zeros. Our finished code looks like this:

printf( __( '<span>Posted on</span> %2$s <span>by</span> %3$s', 'twentyten' ),
'meta-prep meta-prep-author',
sprintf( '<a href="%1$s" title="%2$s" rel="bookmark"><time datetime="%3$s" pubdate>%4$s</time></a>',
get_permalink(),
esc_attr( get_the_time('H:i') ),
get_the_date('c'),
get_the_date()
),

I’ve have included get_the_date() twice as we need two different formats: one for the <time> element and one that’s displayed to the user.

For more details on the WordPress date/time functions check out:

    * http://codex.wordpress.org/Function_Reference/get_the_time
    * http://codex.wordpress.org/Formatting_Date_and_Time

Figures

A figure, for our purposes at least, is a piece of media that you might upload to WordPress and then include in a post; the most obvious example of which would be an image. WordPress3 is helpful enough to give images a caption but it doesn’t do so using the new HTML5 <figure> tag.

The spec defines <figure> as follows:

    “The figure element represents a unit of content, optionally with a caption, that is self-contained, that is typically referenced as a single unit from the main flow of the document, and that can be moved away from the main flow of the document without affecting the document’s meaning.”

Currently an img with a caption will be rendered like so:

<div style="width: 445px"><img alt="Boat" src="http://wpdotorg.files.wordpress.com/2008/11/boat.jpg" title="Boat" width="435" height="288" />
<p>Boat</p>
</div>
<p>Boat.</p>

How do we do this? Well in wp-includes we need to look at media.php, which is where this code is generated. On or around line 739 you’ll find:

return '<div ' . $id . 'class="wp-caption ' . esc_attr($align) . '" style="width: ' . (10 + (int) $width) . 'px">'
. do_shortcode( $content ) . '<p>' . $caption . '</p></div>';

What we need to do is redefine the function that this piece of code sits in (img_caption_shortcode()) and also reassign the caption shortcode for this function. I’ve done this in functions.php by adding the following:

add_shortcode('wp_caption', 'twentyten_img_caption_shortcode');
add_shortcode('caption', 'twentyten_img_caption_shortcode');

function twentyten_img_caption_shortcode($attr, $content = null) {

// Allow plugins/themes to override the default caption template.
$output = apply_filters('img_caption_shortcode', '', $attr, $content);
if ( $output != '' )
return $output;

extract(shortcode_atts(array(
'id'    => '',
'align'    => 'alignnone',
'width'    => '',
'caption' => ''
), $attr));

if ( 1 > (int) $width || empty($caption) )
return $content;

if ( $id ) $id = 'id="' . esc_attr($id) . '" ';

return '<figure ' . $id . 'class="wp-caption ' . esc_attr($align) . '" style="width: ' . (10 + (int) $width) . 'px">'
. do_shortcode( $content ) . '<figcaption>' . $caption . '</figcaption></figure>';

}

First we point shortcodes for wp-caption and caption to our new function twentyten_img_caption_shortcode(). Then we simply copy the original function from media.php and change the last few lines to include our <figure> element. This will now render our boat.jpg example from above like so:

<figure id="attachment_64" style="width: 445px;">
<a href="http://localhost/wp-content/uploads/2010/07/boat.jpg"><img title="boat" src="http://localhost/wp-content/uploads/2010/07/boat.jpg" alt="" width="435" height="288"></a>
<figcaption>Boat</figcaption>
</figure>

Header, Navigation & Footer

Finally we can take a look at inserting the new <header>, <nav> and <footer> tags. Currently the code in /wp-content/themes/twentyten/header.php looks more or less like this:

<div id="header">
<div id="masthead">
<div id="branding" role="banner">
...
</div><!-- #branding -->

<div id="access" role="navigation">
...
</div><!-- #access -->
</div><!-- #masthead -->
</div><!-- #header -->

It doesn’t take a genius to see that we can easily make this HTML5 ready by changing some of those divs.

<header>
<section id="masthead" >
<div id="branding" role="banner">
...
</div><!-- #branding -->

<nav id="access" role="navigation">
...
</nav><!-- #access -->
</section><!-- #masthead -->
<header><!-- #header -->

You can see that we’ve still left the WAI-ARIA role of ‘navigation’ assigned to the nav element, and this is simply to offer the broadest support to all browsers and screen-readers.

I have replaced the #masthead div with a section, as all the elements within this section relate to one-another. It seems you could delete this section altogether and just apply 30px of top-padding to header to maintain the same layout. Likewise, I’ve maintained the elements IDs in case there is more than one instance of them on the page; multiple headers, footers and navs (amongst others) are all welcome on a HTML5 page.

Likewise in /wp-content/themes/twentyten/footer.php we have

<div id="footer" role="contentinfo">
  <div id="colophon">
  ...
  <div id="site-info">
    <a href="<?php echo home_url( '/' ) ?>" title="<?php echo esc_attr( get_bloginfo( 'name', 'display' ) ); ?>" rel="home">
    <?php bloginfo( 'name' ); ?>
    </a>
  </div><!-- #site-info -->

  <div id="site-generator">
  ...
  </div><!-- #site-generator -->

  </div><!-- #colophon -->
</div><!-- #footer -->

Javascript & CSS

First we need to include modernizr.js which will make sure all our new elements render correctly in Internet Explorer. I add the following line to header.php:

<script src=”/js/modernizr.js”></script>

(Note that we no longer need type=”text/javascript”)

Next, in style.css we need to make sure that our HTML5 elements have display: block assigned to them. For our purposes the following line will suffice:

header, nav, section, article, aside, figure, footer { display: block; }

Whilst we’re looking at the CSS it’s worth remebering that we can now remove type=”text/css” from our <link /> tags. The simplified code looks like:

<link rel="stylesheet" href="<?php bloginfo( 'stylesheet_url' ); ?>" />

That should be enough for now, but remember that changing the structure of the page by replacing older HTML elements with new ones might require some additional CSS.
Final Thoughts

Lorem Ipsum

If you make your changes in twentyten and update WordPress it can overwrite them!
Other Resources

You may be interested in the following articles and related resources